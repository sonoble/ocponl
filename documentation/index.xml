<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentations on Open Network Linux</title>
    <link>http://ocp.opennetlinux.org/documentation/</link>
    <description>Recent content in Documentations on Open Network Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://ocp.opennetlinux.org/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>http://ocp.opennetlinux.org/documentation/GettingStartedWedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ocp.opennetlinux.org/documentation/GettingStartedWedge/</guid>
      <description>

&lt;h2 id=&#34;getting-started-with-the-accton-wedge&#34;&gt;Getting Started With the Accton Wedge&lt;/h2&gt;

&lt;p&gt;To install and run ONL on the Accton Wedge you will need ONIE and
the ONL wedge installer binary. Relevant pointers can be found at
&lt;a href=&#34;https://opennetlinux.org/wedge&#34;&gt;https://opennetlinux.org/wedge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once installed, ONL has a default account (&amp;ldquo;root&amp;rdquo;) with a default password
(&amp;ldquo;onl&amp;rdquo;).  The network interface is disabled by default so that you can change
the root password before the system comes up.  You will need to enable the
network interface before you can run the FBOSS agent.&lt;/p&gt;

&lt;p&gt;FBOSS is installed and set to run the configuration created for a OCP ONL
on Wedge Demo.  This configuration sets up the first physical QSFP port of
the wedge as 4 10G ports (via a break out cable) and configures vlans and
ip addresses on them.&lt;/p&gt;

&lt;h2 id=&#34;onie-manual-install&#34;&gt;ONIE Manual Install&lt;/h2&gt;

&lt;p&gt;If your Accton Wedge does not have ONIE installed, you will need to install
it before you can proceed.&lt;/p&gt;

&lt;p&gt;1) Download the ONIE rescue image from &lt;a href=&#34;http://opennetlinux.org/binaries/accton-wedge/onie-recovery-x86_64-accton_wedge_16x-r0.iso&#34;&gt;http://opennetlinux.org/binaries/accton-wedge/onie-recovery-x86_64-accton_wedge_16x-r0.iso&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Burn the image onto a USB (a USB with a minimum size of 256M is necessary)&lt;/p&gt;

&lt;p&gt;3) Insert the USB into the front USB port on the Wedge&lt;/p&gt;

&lt;p&gt;4) Attach a serial terminal to the wedge&lt;/p&gt;

&lt;p&gt;5) Power on the wedge and wait for the BMC to finish booting&lt;/p&gt;

&lt;p&gt;6) Log into the bmc with the login: root password: 0penBmc&lt;/p&gt;

&lt;p&gt;7) Attach to the wedge microserver using the command sol.sh&lt;/p&gt;

&lt;p&gt;8) If the microserver shows the BIOS status screen press F2 to go to the BIOS
configuration menu&lt;/p&gt;

&lt;p&gt;9) In cases where the wedge microserver has already booted into the default
linux installation, you will need to either reboot (if possible) or hit ctrl-x, exiting to the BMC and issue the &amp;ldquo;wedge_power reset&amp;rdquo; command to power-cycle the
microserver, run sol.sh again and hit F2 when the BIOS status screen appears&lt;/p&gt;

&lt;p&gt;10) One you are in the BIOS configuration, move to the boot screen and change
the boot mode from UEFI to Legacy&lt;/p&gt;

&lt;p&gt;11) In the boot device list, make sure that the USB is set to #1&lt;/p&gt;

&lt;p&gt;12) Hit esc-0 to or F10 to save and exit the configuration&lt;/p&gt;

&lt;p&gt;13) The system will now boot from the ONIE rescue USB&lt;/p&gt;

&lt;p&gt;14) When the ONIE Grub window appears, choose &amp;ldquo;Embed ONIE&amp;rdquo;&lt;/p&gt;

&lt;p&gt;15) ONIE will be installed on the system and the system will automatically
reboot&lt;/p&gt;

&lt;p&gt;16) &lt;em&gt;IMPORTANT&lt;/em&gt; Remove the USB from the system before proceeding to the ONL install&lt;/p&gt;

&lt;h2 id=&#34;onl-manual-install&#34;&gt;ONL Manual Install&lt;/h2&gt;

&lt;p&gt;1) Attach a serial terminal to the wedge&lt;/p&gt;

&lt;p&gt;2) Boot switch and choose &amp;ldquo;ONIE: Rescue&amp;rdquo; to go to ONIE&amp;rdquo;s interactive mode&lt;/p&gt;

&lt;p&gt;3) From the ONIE# prompt run &amp;ldquo;install_url &lt;a href=&#34;http://opennetlinux.org/binaries/latest-wedge-2.0.installer&amp;quot;&#34;&gt;http://opennetlinux.org/binaries/latest-wedge-2.0.installer&amp;quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) Wait for the install to finish and the system to reboot&lt;/p&gt;

&lt;p&gt;5) Once the onl login prompt appears login with the username root and the
password &amp;ldquo;onl&amp;rdquo;&lt;/p&gt;

&lt;p&gt;6) Configure the ma1 interface either via dhcp (dhclient ma1) or manually&lt;/p&gt;

&lt;p&gt;7) Install fboss using the commands&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; apt-get update
#&amp;gt; apt-get install fboss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8) From the command prompt you can start fboss by using the command
&amp;ldquo;service fboss_wedge_agent start&amp;rdquo;&lt;/p&gt;

&lt;p&gt;9) The first time you start the fboss_wedge_agent service it will download
the OpenNSL library from the Broadcom github account.&lt;/p&gt;

&lt;p&gt;10) Once the library is installed, fboss_wedge_agent will start, using the
default configuration located at /etc/fboss/ocp-demo.json&lt;/p&gt;

&lt;p&gt;11) You can confirm that the fboss_wedge_agent is running by issuing the
command &amp;ldquo;service fboss_wedge_agent status&amp;rdquo;&lt;/p&gt;

&lt;p&gt;12) If fboss is running, you should see &amp;ldquo;[ ok ] fboss_wedge_agent is running.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;13) You can now execute the fboss_route.py script and configure the system.&lt;/p&gt;

&lt;h2 id=&#34;modifying-the-fboss-wedge-agent-configuration&#34;&gt;Modifying The fboss_wedge_agent configuration&lt;/h2&gt;

&lt;p&gt;In the /etc/init.d/fboss_wedge_agent script, you will locate a section where
the configuration file &amp;ldquo;FBOSS_DAEMON_OPTIONS&amp;rdquo; is set:&lt;/p&gt;

&lt;p&gt;OCP_DEMO=&amp;ldquo;-config /etc/fboss/ocp-demo.json&amp;rdquo;
SAMPLE1=&amp;ldquo;-config /etc/fboss/sample1.json&amp;rdquo;
SAMPLE2=&amp;ldquo;-config /etc/fboss/sample2.json&amp;rdquo;
SAMPLE3=&amp;ldquo;-config /etc/fboss/sample3.json&amp;rdquo;
FBOSS_DAEMON_OPTIONS=$OCP_DEMO&lt;/p&gt;

&lt;p&gt;The sample configurations are documented here: &lt;a href=&#34;https://github.com/facebook/fboss/tree/master/fboss/agent/configs&#34;&gt;https://github.com/facebook/fboss/tree/master/fboss/agent/configs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To change the configuration, simply change the variable from $OCP_DEMO to $SAMPLE1/2/3 or add your own configuration and set the variable to call it.&lt;/p&gt;

&lt;p&gt;Expected output (you can also see videos at &lt;a href=&#34;https://opennetlinux.org/wedge&#34;&gt;https://opennetlinux.org/wedge&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;ONIE:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ONIE: Using DHCPv4 addr: eth0: 10.7.1.10 / 255.254.0.0
    discover: installer mode detected.  Running installer.

    Please press Enter to activate this console. ONIE: Using DHCPv4 addr: eth0: 10.7.1.10 / 255.254.0.0
    ONIE: Starting ONIE Service Discovery

    To check the install status inspect /var/log/onie.log.
    Try this:  tail -f /var/log/onie.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now press RETURN here to jump into ONIE&amp;rdquo;s manual installer mode.  You should see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ** Installer Mode Enabled **

    ONIE:/ # 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then simply download the latest ONL wedge installer from the website and run it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ONIE:/ # install_url http://opennetlinux.org/binaries/latest-wedge-2.0.installer

    Connecting to opennetlinux.org (107.170.237.53:80)
    Open Network Installer running under ONIE.
    Installing Open Network Linux Software Image (ONL-2.0.0_ONL-OS_2016-02-12.2304-b9b7e50_AMD64.swi)...
    Installation finished. No error reported.
    Install finished.  Rebooting to Open Network Linux.
    ...

    Connecting tty=ttyS1 with /sbin/pgetty

    Debian GNU/Linux 8 localhost ttyS1

    localhost login: root
    Password:
    Linux localhost 3.2.65-1+deb7u2-OpenNetworkLinux #1 SMP Fri Feb 12 23:10:15 UTC 2016 x86_64

    root@localhost:~# apt-get update
    root@localhost:~# apt-get install fboss
    WARNING: The following packages cannot be authenticated!
    folly wangle fbthrift fboss-py fboss-core fboss
    Install these packages without verification? [y/N] y

    root@localhost:~# service fboss_wedge_agent start
    [....] Starting  Facebook FBOSS agent: fboss_wedge_agent
    Error: OpenNSL library not found, attempting to grab from GitHub
    Saving to: ‘/usr/local/lib/libopennsl.so.1’

    OpenNSL library succesfully installed
    [ ok --- Loading   linux-kernel-bde   linux-user-bde   linux-bcm-knet  ; Creating devices .
    root@localhost:~# service fboss_wedge_agent status
    [ ok ] fboss_wedge_agent is running.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://ocp.opennetlinux.org/documentation/PersistWorkflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://ocp.opennetlinux.org/documentation/PersistWorkflow/</guid>
      <description>

&lt;h1 id=&#34;rationale&#34;&gt;Rationale&lt;/h1&gt;

&lt;p&gt;By default, the ONL file system is NOT persistent, meaning that if you
reboot, your changes will dissapear (!!).  While this may sound suboptimal
at first, it does have the incredibly nice property of ensuring that many
classes of configuration and other problems can go away with a reboot.
This is particularly nice when you have a switch that may be headless
(no permanently connected console cable or keyboard).&lt;/p&gt;

&lt;p&gt;ONL accomplishes this with OverlayFS
(&lt;a href=&#34;https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt&#34;&gt;https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt&lt;/a&gt;).
As described at &lt;a href=&#34;http://opennetlinux.org/docs/bootprocess&#34;&gt;http://opennetlinux.org/docs/bootprocess&lt;/a&gt;, the ONL
switch image (.SWI file) contains a read-only root file system image.
The default ONL root file system is then a copy-on-write (using overlayfs)
view into that file system image.&lt;/p&gt;

&lt;p&gt;It has the following properites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any file that is editted/removed/etc is transparently copied into a RAM disk via overlayfs&lt;/li&gt;
&lt;li&gt;Thus, any changes to files appear as you would expect, until a reboot&lt;/li&gt;
&lt;li&gt;Any file that is uneditted remains backed by the /mnt/flash2 file system, so you
do not need to have enough RAM to store the entire rootfs.  This is important with
switches that do not have much RAM to begin with.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That said, ONL does have a provision to persist explicitly marked files
across a reboot.  This document shows how this works.&lt;/p&gt;

&lt;h1 id=&#34;persisting-files&#34;&gt;Persisting Files&lt;/h1&gt;

&lt;p&gt;Just run &lt;code&gt;/sbin/persist /path/to/file&lt;/code&gt; to mark a file as &amp;lsquo;persisted&amp;rsquo;.  This
file will be saved to the /mnt/flash persistent storage device and automatically
put back into place on reboot.  Once a file has been persisted, it will always
be persisted across reboots.  If you really want to unpersist a file, manually remove it from
&amp;lsquo;/persist/rootfs/path/to/file&amp;rsquo;.&lt;/p&gt;

&lt;h1 id=&#34;under-the-covers&#34;&gt;Under the covers&lt;/h1&gt;

&lt;p&gt;Running &lt;code&gt;/sbin/persist file&lt;/code&gt; makes a hardlink of that file, e.g., /foo/bar/baz, to
/persist/rootfs/foo/bar/baz.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;/etc/init.d/restorepersist&lt;/code&gt; script runs on bootup and does a number of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Restores the previously saved cpio archive from /mnt/flash/persist/rootfs into both / and /persist/rootfs&lt;/li&gt;
&lt;li&gt;Sets up hard links between /persist/rootfs/foo/bar/baz and /foo/bar/baz&lt;/li&gt;
&lt;li&gt;Starts a &lt;code&gt;watchdir&lt;/code&gt; process for changes in /persist/rootfs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;watchdir&lt;/code&gt; in turn uses the inotify(3) subsystem to, upon a change, run &lt;code&gt;/sbin/savepersist /persist/rootfs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And so, any change to a persisted file is noticed by watchdir and saved
to /mnt/flash in a cpio archive automatically using /sbin/savepersist.&lt;/p&gt;

&lt;h1 id=&#34;limitations&#34;&gt;Limitations&lt;/h1&gt;

&lt;p&gt;You cannot persist any file that is read/used before &lt;code&gt;/etc/rcS.d/S03restorepersist&lt;/code&gt; is run, including this script itself.  Also, it is NOT recommended for persisting logging files, e.g., /var/log/*.  While technically this will work, you will likely quickly exceed the write cycle limit of the underlying flash memory.  Better to use a syslog server.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Open Network Linux - Documentation - Boot Process</title>
      <link>http://ocp.opennetlinux.org/documentation/BootProcess/</link>
      <pubDate>Fri, 09 Sep 2016 00:11:02 +0100</pubDate>
      
      <guid>http://ocp.opennetlinux.org/documentation/BootProcess/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The high-level boot process for ONL is fairly straight forward, but there is a lot detail.&lt;/p&gt;

&lt;p&gt;At high-level, there are three phases
1. uBoot phase
2. the ONL Loader phase
3. The final ONL operating system&lt;/p&gt;

&lt;h2 id=&#34;detailed-boot-process&#34;&gt;Detailed Boot Process&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;uBoot is the first level boot loader: &lt;a href=&#34;http://www.denx.de/wiki/U-Boot&#34;&gt;http://www.denx.de/wiki/U-Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;uBoot reads the &amp;lsquo;nos_bootcmd&amp;rsquo; environmental variable from flash and runs the contents
(&amp;lsquo;nos&amp;rsquo; is Network Operating System)&lt;/li&gt;
&lt;li&gt;If $nos_boot_cmd returns, uBoot loads and runs ONIE (see below) to download the ONL installer and install the ONL loader
a) The factory default $nos_boot_cmd is to a trival command that returned immediately, e.g., &amp;lsquo;echo&amp;rsquo;&lt;/li&gt;
&lt;li&gt;In normal operation, i.e., after ONIE has been run, $nos_boot_cmd is set to load and run the ONL Loader&lt;/li&gt;
&lt;li&gt;The ONL loader boots the Linux kernel (later, the &amp;ldquo;boot kernel&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;The ONL loader decides which SWI to run based on the URL in the file /etc/SWI
URL=&lt;code&gt;cat /etc/SWI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The ONL loader runs &lt;code&gt;/bin/boot $URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The ONL loader retrieves the SWI file
a) if the URL is remote (e.g., http://, ftp://, etc.), verify that there is a locally cached copy
    of the SWI in /mnt/flash2 or if not, download it
b) if the URL is local, verify that the device is accessible
c) if the URL is a Zero Touch Networking (ZTN) URL, the execute the ZTN protocol to get the SWI (see below)&lt;/li&gt;
&lt;li&gt;The ONL loader reads the &amp;lsquo;rootfs&amp;rsquo; file out of the SWI and mounts it using overlayfs&lt;a href=&#34;SWI contents described below&#34;&gt;1&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;partition-layout&#34;&gt;Partition Layout&lt;/h2&gt;

&lt;p&gt;Switches typically have two flash storage device: a smaller flash (e.g.,
64MB flash) for booting and a larger, mass storage device (e.g., compact
flash, 2+GB).&lt;/p&gt;

&lt;p&gt;Smaller Boot Flash:&lt;/p&gt;

&lt;p&gt;Partition 1: uBoot
Partition 2: environmental variables (e.g., $nos_boot_cmd)
Partition 3: ONIE
Partition 4+: Free space (unused)&lt;/p&gt;

&lt;p&gt;Mass Storage Device:&lt;/p&gt;

&lt;p&gt;Partition 1: ONL loader kernel  &amp;ndash; the format of this partition varies depending on what formats uBoot supports on the specific platform
Partition 2: ONL Loader configuration files (mounts as &amp;ldquo;/mnt/flash&amp;rdquo; both during the loader and the main ONL phases)
Partition 3: ONL SWitch Images (SWIs) partition (mounts as &amp;ldquo;/mnt/flash2&amp;rdquo; both during the loader and the main ONL phases)&lt;/p&gt;

&lt;h2 id=&#34;onl-file-system-layout&#34;&gt;ONL file system layout&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;root@onl-powerpc:/bin# df
Filesystem     1K-blocks  Used Available Use% Mounted on
rootfs             72040   176     71864   1% /
devtmpfs            1024     0      1024   0% /dev
none               72040   176     71864   1% /
tmpfs              48028   148     47880   1% /run
tmpfs               5120     0      5120   0% /run/lock
/dev/sda2          71177     7     71170   1% /mnt/flash
/dev/sda3        3791960 98172   3693788   3% /mnt/flash2
tmpfs              96040     0     96040   0% /run/shm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;swi&#34;&gt;SWI&lt;/h2&gt;

&lt;p&gt;Zip file contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ unzip -l ONL-2.0.0_ONL-OS_2015-12-12.0252-ffce159_PPC.swi
Archive:  ONL-2.0.0_ONL-OS_2015-12-12.0252-ffce159_PPC.swi
Length      Date    Time    Name
---------  ---------- -----   ----
 97968128  2015-12-15 20:20   rootfs-powerpc.sqsh
 1063      2015-12-15 20:20   manifest.json
---------                     -------
 97969191                     2 files
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&amp;lsquo;rootfs-$ARCH&amp;rsquo;   : the root file system for the running ONL&lt;/li&gt;
&lt;li&gt;&amp;lsquo;manifest.json&amp;rsquo;  : a list of supported platforms, version information about ONL and the architecture&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h2&gt;

&lt;p&gt;[1] : &lt;a href=&#34;https://kernel.googlesource.com/pub/scm/linux/kernel/git/mszeredi/vfs/+/overlayfs.current/Documentation/filesystems/overlayfs.txt&#34;&gt;https://kernel.googlesource.com/pub/scm/linux/kernel/git/mszeredi/vfs/+/overlayfs.current/Documentation/filesystems/overlayfs.txt&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Open Network Linux - Documentation - Building</title>
      <link>http://ocp.opennetlinux.org/documentation/Building/</link>
      <pubDate>Fri, 09 Sep 2016 00:11:02 +0100</pubDate>
      
      <guid>http://ocp.opennetlinux.org/documentation/Building/</guid>
      <description>

&lt;p&gt;#How to Build Open Network Linux&lt;/p&gt;

&lt;p&gt;In case you are not interested in building ONL from scratch
(it takes a while) you can download pre-compiled binaries from
&lt;a href=&#34;http://opennetlinux.org/binaries&#34;&gt;http://opennetlinux.org/binaries&lt;/a&gt; .&lt;/p&gt;

&lt;h2 id=&#34;build-hosts-and-environments&#34;&gt;Build Hosts and Environments&lt;/h2&gt;

&lt;p&gt;ONL builds with Docker so the only requirements on the build system is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;docker            # to grab the build workspace&lt;/li&gt;
&lt;li&gt;binfmt-support        # kernel support for ppc builds&lt;/li&gt;
&lt;li&gt;About 40G of disk free space  # to build all images&lt;/li&gt;
&lt;li&gt;At least 4G of ram and 4G of swap # compilation is memory intensive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the testing is done with Debian, other Linux distributions may work, but we suggest using Debian 8.
    # apt-get install binfmt-support
    then follow the instructions at: &lt;a href=&#34;https://docs.docker.com/engine/installation/debian/&#34;&gt;https://docs.docker.com/engine/installation/debian/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;build-onl-summary&#34;&gt;Build ONL Summary&lt;/h2&gt;

&lt;p&gt;The easiest way to build is to use the make docker command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; git clone https://github.com/opencomputeproject/OpenNetworkLinux
#&amp;gt; cd OpenNetworkLinux
#&amp;gt; make docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will build a Debian 7 based ONL from the master branch&lt;/p&gt;

&lt;p&gt;To build a Debian 8 based ONL run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; git clone https://github.com/opencomputeproject/OpenNetworkLinux
#&amp;gt; cd OpenNetworkLinux
#&amp;gt; export VERSION=8
#&amp;gt; make docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you would like to build by hand you can do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; git clone https://github.com/opencomputeproject/OpenNetworkLinux
#&amp;gt; cd OpenNetworkLinux
#&amp;gt; docker/tools/onlbuilder (-8)                                        # enter the docker workspace
#&amp;gt; apt-cacher-ng
#&amp;gt; source setup.env             # pull in necessary environment variables
#&amp;gt; make amd64 ppc                           # make onl for $platform (currently amd64 or powerpc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting ONIE installers are in
$ONL/RELEASE/$SUITE/$ARCH/ONL-2.&lt;em&gt;INSTALLER, i.e.
RELEASE/jessie/amd64/ONL-2.0.0_ONL-OS_2015-12-12.0252-ffce159_AMD64_INSTALLER
and the SWI files (if you want them) are in
$ONL/RELEASE/$SUITE/$ARCH/ONL&lt;/em&gt;.swi. i.e.
RELEASE/jessie/amd64/ONL-2.0.0_ONL-OS_2015-12-12.0252-ffce159_AMD64.swi&lt;/p&gt;

&lt;p&gt;#Installing Docker Gotchas&lt;/p&gt;

&lt;p&gt;Docker installer oneliner (for reference: see docker.com for details)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wget -qO- https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Common docker related issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check out &lt;a href=&#34;http://docs.docker.com/installation/debian/&#34;&gt;http://docs.docker.com/installation/debian/&lt;/a&gt; for detailed instructions&lt;/li&gt;
&lt;li&gt;You may have to update your kernel to 3.10+&lt;/li&gt;
&lt;li&gt;Beware that &lt;code&gt;apt-get install docker&lt;/code&gt; installs a dock application not docker :-)  You want the lxc-docker package instead.&lt;/li&gt;
&lt;li&gt;Some versions of docker are unhappy if you use a local DNS caching resolver:

&lt;ul&gt;
&lt;li&gt;e.g., you have 127.0.0.1 in your /etc/resolv.conf

&lt;ul&gt;
&lt;li&gt;if you have this, specify DNS=&amp;ldquo;&amp;ndash;dns 8.8.8.8&amp;rdquo; when you enter the docker environment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;e.g., &lt;code&gt;make DNS=&amp;quot;--dns 8.8.8.8&amp;quot; docker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider enabling builds for non-privileged users with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo usermod -aG docker $USER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you run as non-root without this, you will get errors like &amp;ldquo;..: dial unix /var/run/docker.sock: permission denied&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Building as root is fine as well (it immediately jumps into a root build shell), so this optional
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;additional-build-details&#34;&gt;#Additional Build Details&lt;/h2&gt;

&lt;p&gt;The rest of this guide talks about how to build specific
sub-components of the ONL ecosystem and tries to overview
all of the various elements of the build.&lt;/p&gt;

&lt;h2 id=&#34;build-all-deb-packages-for-all-architectures&#34;&gt;Build all .deb packages for all architectures&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; cd $ONL/packages
#&amp;gt; make
#&amp;gt; find $ONL/REPO -name \*.deb    # all of the .deb files end up here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A number of things will happen automatically, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git submodule checkouts and updates for kernel, loader, and additional code repositories&lt;/li&gt;
&lt;li&gt;automatic builds of all debian packages and their dependencies&lt;/li&gt;
&lt;li&gt;automatic download of binary-only .deb packages from apt.opennetlinux.org&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After all components have been built, your can build an ONL
Software Image from those components.&lt;/p&gt;

&lt;h2 id=&#34;adding-removing-packages-from-a-swi&#34;&gt;Adding/Removing packages from a SWI:&lt;/h2&gt;

&lt;p&gt;The list of packages for a given SWI are in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ONL/packages/base/any/rootfs/common/$ARCH-packages.yml # for $ARCH specific packages
$ONL/packages/base/any/rootfs/common/common-packages.yml    # for $ARCH-independent packages
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-a-software-image-swi-for-all-powerpc-platforms&#34;&gt;Build a software image (SWI) for all powerpc platforms:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; cd $ONL/builds/powerpc/swi
#&amp;gt; make
#&amp;gt; cd builds
#&amp;gt; ls *.swi
ONL-2.0.0_ONL-OS_2015-12-12.0252-ffce159_PPC.swi
#&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build an ONIE-compatible installer for all powerpc platforms.
This will incorporate the SWI you just built or build it dynamically if not.&lt;/p&gt;

&lt;h2 id=&#34;this-installer-image-can-be-served-to-onie-on-quanta-or-accton-platforms&#34;&gt;This installer image can be served to ONIE on Quanta or Accton platforms:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; cd $ONL/builds/powerpc/installer/legacy
#&amp;gt; make
#&amp;gt; cd builds
#&amp;gt; ls *INSTALLER
ONL-2.0.0_ONL-OS_2015-12-12.0252-ffce159_PPC_INSTALLER
#&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-setup-on-new-debian-8-2-installation&#34;&gt;Example setup on new Debian 8.2 installation&lt;/h2&gt;

&lt;p&gt;Install sudo and add yourself to the sudoers:&lt;/p&gt;

&lt;p&gt;As root:&lt;/p&gt;

&lt;p&gt;apt-get install sudo&lt;/p&gt;

&lt;p&gt;vi /etc/sudoers.d/username&lt;/p&gt;

&lt;p&gt;Add the line:&lt;/p&gt;

&lt;p&gt;username    ALL=(ALL:ALL) ALL&lt;/p&gt;

&lt;p&gt;Add the docker key:&lt;/p&gt;

&lt;p&gt;sudo apt-key adv &amp;ndash;keyserver hkp://p80.pool.sks-keyservers.net:80 &amp;ndash;recv-keys 58118E89F3A912897C070ADBF76221572C52609D&lt;/p&gt;

&lt;p&gt;gpg: key 2C52609D: public key &amp;ldquo;Docker Release Tool (releasedocker) &lt;a href=&#34;mailto:docker@docker.com&#34;&gt;docker@docker.com&lt;/a&gt;&amp;rdquo; imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)&lt;/p&gt;

&lt;p&gt;Install necessary items, make, binfmt-support and apt-transport-https (for docker):&lt;/p&gt;

&lt;p&gt;sudo apt-get install apt-transport-https make binfmt-support&lt;/p&gt;

&lt;p&gt;Add the docker repository to your system:&lt;/p&gt;

&lt;p&gt;sudo vi /etc/apt/sources.list.d/docker.list&lt;/p&gt;

&lt;p&gt;Add the following line to the file:&lt;/p&gt;

&lt;p&gt;deb &lt;a href=&#34;https://apt.dockerproject.org/repo&#34;&gt;https://apt.dockerproject.org/repo&lt;/a&gt; debian-jessie main&lt;/p&gt;

&lt;p&gt;Install Docker:&lt;/p&gt;

&lt;p&gt;sudo apt-get update&lt;/p&gt;

&lt;p&gt;sudo apt-get install docker-engine&lt;/p&gt;

&lt;p&gt;Test Docker:&lt;/p&gt;

&lt;p&gt;sudo docker run hello-world&lt;/p&gt;

&lt;p&gt;Unable to find image &amp;lsquo;hello-world:latest&amp;rsquo; locally
latest: Pulling from library/hello-world
b901d36b6f2f: Pull complete
0a6ba66e537a: Pull complete
Digest: sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
Status: Downloaded newer image for hello-world:latest&lt;/p&gt;

&lt;p&gt;Hello from Docker.
This message shows that your installation appears to be working correctly.&lt;/p&gt;

&lt;p&gt;Add yourself to the docker group:&lt;/p&gt;

&lt;p&gt;sudo gpasswd -a snoble docker&lt;/p&gt;

&lt;p&gt;Adding user snoble to group docker&lt;/p&gt;

&lt;p&gt;logout and log back in for the group to take effect:&lt;/p&gt;

&lt;p&gt;Clone the OpenNetworkLinux repository:&lt;/p&gt;

&lt;p&gt;git clone &lt;a href=&#34;https://github.com/opencomputeproject/OpenNetworkLinux.git&#34;&gt;https://github.com/opencomputeproject/OpenNetworkLinux.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cloning into &amp;lsquo;OpenNetworkLinux&amp;rsquo;&amp;hellip;
Checking connectivity&amp;hellip; done.&lt;/p&gt;

&lt;p&gt;Build OpenNetworkLinux:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; cd OpenNetworkLinux/
#&amp;gt; make docker
#&amp;gt; Pulling opennetworklinux/builder7:1.0…
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; docker/tools/onlbuilder
#&amp;gt; source setup.env
#&amp;gt; apt-cacher-ng
#&amp;gt; make onl-x86 onl-ppc
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Open Network Linux - Documentation - Getting Started</title>
      <link>http://ocp.opennetlinux.org/documentation/GettingStarted/</link>
      <pubDate>Fri, 09 Sep 2016 00:11:02 +0100</pubDate>
      
      <guid>http://ocp.opennetlinux.org/documentation/GettingStarted/</guid>
      <description>

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;To install and run ONL you need is an ONL Compatible switch (see
&lt;a href=&#34;http://opennetlinux.org/hcl)&#34;&gt;http://opennetlinux.org/hcl)&lt;/a&gt; and the ONL installer binary.  Every
ONL compatible switch ships with the ONIE installer environment installed
which gives you a multitude of ways of getting ONL installed on your switch.&lt;/p&gt;

&lt;p&gt;We document the easiest ways here (manual install via console and NFS)
but the &lt;a href=&#34;http://onie.org&#34;&gt;http://onie.org&lt;/a&gt; website contains a variety of installation
methods including via USB, over the network, and even via ssh.&lt;/p&gt;

&lt;p&gt;The resulting installation has a default account (&amp;ldquo;root&amp;rdquo;) with a default
password (&amp;ldquo;onl&amp;rdquo;).  The network interface is disabled by default so that
you can change the root password before the system comes up.&lt;/p&gt;

&lt;h2 id=&#34;onl-manual-install&#34;&gt;ONL Manual Install&lt;/h2&gt;

&lt;p&gt;1) Attach a serial terminal to the switch
2) Boot switch and hit return to go to ONIE&amp;rdquo;s interactive mode
    2a) You must wait until after uboot has finished loading; if you
        accidentally interupt uboot first, just run &lt;code&gt;boot&lt;/code&gt; to continue
        booting into ONIE
3) Download the ONL installer from &lt;a href=&#34;http://opennetlinux.org&#34;&gt;http://opennetlinux.org&lt;/a&gt; and run it by hand&lt;/p&gt;

&lt;p&gt;Expected Serial Console Output (from an QuantaMesh LB9, other switches ouput will vary):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    U-Boot 2010.12 (Oct 08 2013 - 17:11:37)

    CPU:   8541, Version: 1.1, (0x80720011)
    Core:  Unknown, Version: 2.0, (0x80200020)
    Clock Configuration:
           CPU0:825  MHz, 
           CCB:330  MHz,
           DDR:165  MHz (330 MT/s data rate), LBC:41.250 MHz
    CPM:   330 MHz
    L1:    D-cache 32 kB enabled
           I-cache 32 kB enabled
    I2C:   ready
    DRAM:  Detected UDIMM TS128MSD64V3A
    Detected UDIMM(s)
    DDR: 1 GiB (DDR1, 64-bit, CL=2.5, ECC off)
    FLASH: 64 MiB
    L2:    256 KB enabled

    LB9 U-Boot
      Product Name          : LB9
      Model Name            : QUANTA LB9
      Serial Number         : QTFCA63280001
      Part Number           : 1LB9BZZ0STQ
      Label Revision Number : 1
      Hardware Version      : 1.0
      Platform Version      : 0xb901 
      Release Date          : 2013/7/5
      MAC Address           : 08:9e:01:ce:bd:2d
    Set ethaddr MAC address = 08:9e:01:ce:bd:2d
    In:    serial
    Out:   serial
    Err:   serial
    Net:   TSEC0: PHY is Broadcom BCM5461S (2060c1)
    TSEC0
    IDE:   Bus 0: OK 
      Device 0: Model: 4GB CompactFlash Card Firm: Ver6.04J Ser#: CDE207331D0100001484
                Type: Hard Disk
                Capacity: 3811.9 MB = 3.7 GB (7806960 x 512)
    Hit any key to stop autoboot:  0 
    ## Error: &amp;quot;nos_bootcmd&amp;quot; not defined
    Loading Open Network Install Environment ...
    Platform: powerpc-quanta_lb9-r0
    Version : 1.5.2-20131008154633
    WARNING: adjusting available memory to 30000000
    ## Booting kernel from Legacy Image at 04000000 ...
       Image Name:   quanta_lb9-r0
       Image Type:   PowerPC Linux Multi-File Image (gzip compressed)
       Data Size:    3479390 Bytes = 3.3 MiB
       Load Address: 00000000
       Entry Point:  00000000
       Contents:
          Image 0: 2762740 Bytes = 2.6 MiB
          Image 1: 707380 Bytes = 690.8 KiB
          Image 2: 9254 Bytes = 9 KiB
       Verifying Checksum ... OK
    ## Loading init Ramdisk from multi component Legacy Image at 04000000 ...
    ## Flattened Device Tree from multi component Image at 04000000
       Booting using the fdt at 0x434f378
       Uncompressing Multi-File Image ... OK
       Loading Ramdisk to 2ff53000, end 2ffffb34 ... OK
       Loading Device Tree to 03ffa000, end 03fff425 ... OK
    Cannot reserve gpages without hugetlb enabled
    setup_arch: bootmem
    quanta_lb9_setup_arch()
    arch: exit

    ONIE: Using DHCPv4 addr: eth0: 10.7.1.10 / 255.254.0.0
    discover: installer mode detected.  Running installer.

    Please press Enter to activate this console. ONIE: Using DHCPv4 addr: eth0: 10.7.1.10 / 255.254.0.0
    ONIE: Starting ONIE Service Discovery

    To check the install status inspect /var/log/onie.log.
    Try this:  tail -f /var/log/onie.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now press RETURN here to jump into ONIE&amp;rdquo;s manual installer mode.  You should see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ** Installer Mode Enabled **

    ONIE:/ # 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then simply download the latest ONL installer for the appropriate
architecture (powerpc or amd64) from the website and run it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ONIE:/ # install_url http://opennetlinux.org/binaries/latest-$ARCH.installer

    Connecting to opennetlinux.org (107.170.237.53:80)
    Open Network Installer running under ONIE.
    Installer Version: Open Network Linux e148b7a (powerpc.all,2014.05.21.18.57,e148b7a90131c07eb8d49f74316baf8f2aae92c6)
    Detected platform: powerpc-quanta-lb9-r0
    Installing in standalone mode.
    Unpacking Open Network Linux installer files...
    onl.powerpc-as4600-54t.loader
    onl.powerpc-as5600-52x.loader
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;p&gt;1) If there is different OS(other than ONL) running on the switch.
Then halt the booting process at U-boot mode, Then check for the ONIE&lt;br /&gt;
details in the environment(=&amp;gt; printenv). Open the ONIE in rescue mode,
while ONIE has many different installation modes,
we recommend the rescue mode for doing a manual (read: via console)
because it disables the automatic ONIE server discovery.
Then run (=&amp;gt; run onie_rescue) command to take you to the ONIE environment.&lt;/p&gt;

&lt;p&gt;2) For development purpose, to load freshly build ONL installer from directly ONIE.
Run a http server from the build machine (example:python -m SimpleHTTPServer 8000) and access it as,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;example: ONIE:/ # install_url http://buildmachineIPAddress:/path/to/directory/onl-09b7bba-powerpc-all.2016.02.05.05.17.installer # update for specific file/date/build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, you can use install via scp with two steps,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   example: ONIE:/ # scp [username]@buildmachineIPAddress:/path/to/directory/onl-09b7bba-powerpc-all.2016.02.05.05.17.installer  ONL.installer # update for specific file/date/build
            ONIE:/ # sh ONL.installer
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;onl-nfs-root-directory&#34;&gt;ONL NFS Root Directory&lt;/h2&gt;

&lt;p&gt;Given that the default installation of ONL does not persist files across
reboots (this is intentional &amp;ndash; flash disks should not be written to
as often as spinning disks), it is sometimes useful to have a normally
writable, larger disk available for the switch.  Enter the NFS root
directory which enables a switch to boot ONL from a remote NFS partition.
While it is possible to simply fetch the SWI file from an NFS server
(keeping the same non-persisted behavior), the much more useful feature
is to have the root file system NFS hosted.&lt;/p&gt;

&lt;p&gt;To enable NFS mounted root partition:&lt;/p&gt;

&lt;p&gt;1) Run the ONL installer normally (e.g., via the manual mode per above) so that the ONL
    loader is installed.&lt;/p&gt;

&lt;p&gt;2) Edit /mnt/flash/boot-config, enable DHCP, and change the SWI variable to point to a URL of the form &amp;ldquo;nfs://$ip[:port]/path/to/directory/&amp;ldquo;.  For example, on my machine, this looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # cat /mnt/flash/boot-config
 SWI=nfs://10.6.0.4/home/robs/export/ly2-1/  # trailing &#39;/&#39; is critical
 NETAUTO=dhcp                                # optional, but likely what you want
 NETDEV=ma1                                  # leave untouched
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) On server $ip, in /path/to/directory, unzip a target .SWI file, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # wget http://opennetlinux.org/binaries/latest.swi
 # unzip latest.swi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) unsquash the compressed root file system as directory &amp;lsquo;rootfs-$arch&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # unsquashfs -d rootfs-$arch rootfs-$arch.sqsh  # e.g., $arch = &#39;powerpc&#39;h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now reboot your switch and it should boot automatically into the NFS root file system.
Note that the SWI structure is still maintained:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; robs@sbs3:~/export/ly2-1$ ls -l
 total 109048
 -rw-r--r--  1 robs __USERS__   3382017 Nov  4 22:28 initrd-powerpc
 -rwxr-xr-x  1 robs __USERS__   6942960 Nov  4 22:28 kernel-85xx*
 -rw-r--r--  1 robs __USERS__ 101322752 Nov  4 22:28 rootfs-powerpc.sqsh
 drwxrwxr-x 22 robs __USERS__      4096 Jan  2 18:21 rootfs-powerpc/
 -rw-r--r--  1 robs __USERS__       100 Nov  4 22:29 version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is:
* &amp;lsquo;kernel-85xx&amp;rsquo; is the kernel image
* &amp;lsquo;initrd-powerpc&amp;rsquo; is the initial RAM disk image
* &amp;lsquo;rootfs-powerpc&amp;rsquo; is the base of the root filesystem
* &amp;lsquo;version&amp;rsquo; is a string that identifies this SWI&lt;/p&gt;

&lt;p&gt;Note: If NFS root squash is set on the server, you might get a permission error while booting. To fix this, you can set &amp;lsquo;no_disable_squash&amp;rsquo; in /etc/exports. However, be aware of the security implications as root on a client machine will now have the same access privilege on the files as root on the NFS server.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Open Network Linux - Documentation - HCL</title>
      <link>http://ocp.opennetlinux.org/documentation/SupportedHardware/</link>
      <pubDate>Fri, 09 Sep 2016 00:11:02 +0100</pubDate>
      
      <guid>http://ocp.opennetlinux.org/documentation/SupportedHardware/</guid>
      <description>

&lt;h1 id=&#34;hardware-support&#34;&gt;Hardware Support&lt;/h1&gt;

&lt;p&gt;Because of the HTML formatting, this page may be best viewed from
&lt;a href=&#34;http://opennetlinux.org/hcl&#34;&gt;http://opennetlinux.org/hcl&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;quanta&#34;&gt;Quanta&lt;/h2&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
&lt;thead&gt;
&lt;tr class=&#34;info&#34;&gt; 
     &lt;th&gt; Device                  &lt;th&gt; Ports            &lt;th&gt; CPU                 &lt;th&gt; Forwarding                    &lt;th&gt; ONL Certified         &lt;th&gt; In Lab &lt;th&gt; ORC &lt;th&gt; OF-DPA &lt;th&gt; OpenNSL &lt;th&gt; SAI &lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt; &lt;td&gt; QuantaMesh T1048-LB9    &lt;td&gt; 48x1G  + 4x10G   &lt;td&gt; FreeScale P2020       &lt;td&gt; Broadcom BCM56534 (Firebolt3)       &lt;td&gt; Yes  &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; QuantaMesh T3048-LY2    &lt;td&gt; 48x10G + 4x40G   &lt;td&gt; FreeScale P2020       &lt;td&gt; Broadcom BCM56846 (Trident+)        &lt;td&gt; Yes   &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt; QuantaMesh T3048-LY8    &lt;td&gt; 48x10G + 6x40G   &lt;td&gt; Intel Rangeley C2758 x86 &lt;td&gt; Broadcom BCM56854 (Trident2)            &lt;td&gt; Yes*  &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt; QuantaMesh T5032-LY6    &lt;td&gt; 32x40G  &lt;td&gt; Intel Rangeley C2758 x86 &lt;td&gt; Broadcom BCM56850 (Trident2)            &lt;td&gt; Yes* &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;accton-edge-core&#34;&gt;Accton/Edge-Core&lt;/h2&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
&lt;thead&gt;
&lt;tr class=&#34;info&#34;&gt;
     &lt;th&gt; Device                  &lt;th&gt; Ports            &lt;th&gt; CPU                 &lt;th&gt; Forwarding                    &lt;th&gt; ONL Certified        &lt;th&gt; In Lab &lt;th&gt; ORC &lt;th&gt; OF-DPA &lt;th&gt; OpenNSL &lt;th&gt; SAI &lt;/tr&gt; 
&lt;/thead&gt;
&lt;tr&gt; &lt;td&gt; Accton AS4600-54T       &lt;td&gt; 48x1G  + 4x10G   &lt;td&gt; FreeScale P2020       &lt;td&gt; Broadcom BCM56540 (Apollo2)       &lt;td&gt; Yes  &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes*** &lt;td&gt; Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS4610-54P       &lt;td&gt; 48x1G + 4x10G + 2x20G &lt;td&gt;  Dual-core ARM Cortex A9 1GHz &lt;td&gt; Broadcom BCM56340 (Helix4) &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS5600-52X       &lt;td&gt; 48x10G  + 4x40G   &lt;td&gt; FreeScale P2020       &lt;td&gt; Broadcom BCM56846 (Trident+)      &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS5610-52X       &lt;td&gt; 48x10G  + 4x40G   &lt;td&gt; FreeScale P2020       &lt;td&gt; Broadcom BCM56846 (Trident+)      &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS5710-54X       &lt;td&gt; 48x10G + 6x40G   &lt;td&gt; FreeScale P2041       &lt;td&gt; Broadcom BCM56854 (Trident2)      &lt;td&gt; Yes  &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes*** &lt;td&gt; Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS6700-32X       &lt;td&gt; 32x40G           &lt;td&gt; FreeScale P2041       &lt;td&gt; Broadcom BCM56850 (Trident2)      &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS5512-54X       &lt;td&gt; 48x10G + 6x40G   &lt;td&gt; Intel Rangeley C2538 x86 &lt;td&gt; MediaTek MT3257      &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS5712-54X       &lt;td&gt; 48x10G + 6x40G   &lt;td&gt; Intel Rangeley C2538 x86 &lt;td&gt; Broadcom BCM56854 (Trident2)      &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes*** &lt;td&gt; Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS6712-32X       &lt;td&gt; 32x40G           &lt;td&gt; Intel Rangeley C2538 x86 &lt;td&gt; Broadcom BCM56850 (Trident2)      &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes*** &lt;td&gt;  Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS5812-54T       &lt;td&gt; 48x10G + 6x40G   &lt;td&gt; Intel Rangeley C2538 x86 &lt;td&gt; Broadcom BCM56864 (Trident2+)      &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS5812-54X       &lt;td&gt; 48x10G + 6x40G   &lt;td&gt; Intel Rangeley C2538 x86 &lt;td&gt; Broadcom BCM56864 (Trident2+)      &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; Yes*** &lt;td&gt; Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS6812-32X       &lt;td&gt; 32x40G           &lt;td&gt; Intel Rangeley C2538 x86 &lt;td&gt; Broadcom BCM56864 (Trident2+)      &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; Yes***  &lt;td&gt; Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS7712-32X       &lt;td&gt; 32x100G          &lt;td&gt; Intel Rangeley C2538 x86 &lt;td&gt; Broadcom BCM56960 (Tomahawk)       &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; Yes***  &lt;td&gt;  Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton AS7716-32X       &lt;td&gt; 32x100G          &lt;td&gt; Intel Xeon D-1518 x86 &lt;td&gt; Broadcom BCM56960 (Tomahawk)       &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; Yes*** &lt;td&gt;  Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Accton Wedge-16X        &lt;td&gt; 16x40G           &lt;td&gt; Intel Rangeley C2550 x86 &lt;td&gt; Broadcom BCM56864 (Trident2+)      &lt;td&gt; Work In Progress** &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; Yes &lt;td&gt; No &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;dni-agema&#34;&gt;DNI/Agema&lt;/h2&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
&lt;thead&gt;
&lt;tr class=&#34;info&#34;&gt;
     &lt;th&gt; Device                  &lt;th&gt; Ports            &lt;th&gt; CPU                 &lt;th&gt; Forwarding             &lt;th&gt; ONL Certified        &lt;th&gt; In Lab &lt;th&gt; ORC &lt;th&gt; OF-DPA &lt;th&gt; OpenNSL &lt;th&gt; SAI &lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt; &lt;td&gt; AG-7448CU               &lt;td&gt; 48x10G  + 4x40G  &lt;td&gt; FreeScale P2020       &lt;td&gt; Broadcom BCM56845 (Trident)     &lt;td&gt; Yes   &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;dell&#34;&gt;Dell&lt;/h2&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
&lt;thead&gt;
&lt;tr class=&#34;info&#34;&gt;
     &lt;th&gt; Device                  &lt;th&gt; Ports            &lt;th&gt; CPU                 &lt;th&gt; Forwarding             &lt;th&gt; ONL Certified         &lt;th&gt; In Lab &lt;th&gt; ORC &lt;th&gt; OF-DPA &lt;th&gt; OpenNSL &lt;th&gt; SAI &lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt; &lt;td&gt; S4810-ON            &lt;td&gt; 48x10G  + 4x40G  &lt;td&gt; FreeScale P2020        &lt;td&gt; Broadcom BCM56845 (Trident)     &lt;td&gt; Yes   &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; S4048-ON            &lt;td&gt; 48x10G  + 6x40G  &lt;td&gt; Intel Atom C2338       &lt;td&gt; Broadcom BCM56854 (Trident2)     &lt;td&gt; Yes  &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt; 
&lt;tr&gt; &lt;td&gt; S6000-ON            &lt;td&gt; 32x40G           &lt;td&gt; Intel Atom S1220       &lt;td&gt; Broadcom BCM56850 (Trident2)     &lt;td&gt; Yes  &lt;td&gt; Yes &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Z9100-ON            &lt;td&gt; 32x100G           &lt;td&gt; Intel Atom C2538       &lt;td&gt; Broadcom BCM56960 (Tomahawk)     &lt;td&gt; Yes  &lt;td&gt; Yes &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;td&gt; No &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;interface-masters-technologies-inc&#34;&gt;Interface Masters Technologies, Inc.&lt;/h2&gt;

&lt;table class=&#34;table table-striped table-hover&#34;&gt;
&lt;thead&gt;
&lt;tr class=&#34;info&#34;&gt;
     &lt;th&gt; Device          &lt;th&gt; Ports       &lt;th&gt; CPU        &lt;th&gt; Forwarding       &lt;th&gt; ONL Certified     &lt;th&gt; In Lab &lt;th&gt; ORC &lt;th&gt; OF-DPA &lt;th&gt; OpenNSL &lt;th&gt; SAI &lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt; &lt;td&gt; Niagara 2948X12XLm   &lt;td&gt; 48x10G  + 12x40G  &lt;td&gt; Intel/AMD x86    &lt;td&gt; Broadcom BCM56850 (Trident2)   &lt;td&gt; Work In Progress** &lt;td&gt; No &lt;td&gt; No &lt;td&gt; Yes*** &lt;td&gt; Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Niagara 2960X6XLm    &lt;td&gt; 60x10G  + 6x40G   &lt;td&gt; Intel/AMD x86    &lt;td&gt; Broadcom BCM56850 (Trident2)   &lt;td&gt; Work In Progress** &lt;td&gt; No &lt;td&gt;  No &lt;td&gt; Yes*** &lt;td&gt; Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Niagara 2972Xm       &lt;td&gt; 72x10G            &lt;td&gt; Intel/AMD x86    &lt;td&gt; Broadcom BCM56850 (Trident2)   &lt;td&gt; Work In Progress** &lt;td&gt; Yes &lt;td&gt;  No &lt;td&gt; Yes*** &lt;td&gt; Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Niagara 2932XL       &lt;td&gt; 32x40G            &lt;td&gt; Intel/AMD x86    &lt;td&gt; Broadcom BCM56850 (Trident2)   &lt;td&gt; Work In Progress** &lt;td&gt; No &lt;td&gt; No &lt;td&gt; Yes*** &lt;td&gt; Yes*** &lt;td&gt; No &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; Niagara 2948X6XL     &lt;td&gt; 48x10G  + 6x40G   &lt;td&gt; Intel/AMD x86    &lt;td&gt; Broadcom BCM56850 (Trident2)   &lt;td&gt; Work In Progress** &lt;td&gt; No &lt;td&gt;  No &lt;td&gt; Yes*** &lt;td&gt; Yes &lt;td&gt; No &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes:&lt;/h2&gt;

&lt;p&gt;ONL Certified means that the system runs ONIE, is able to install a generic version of ONL and has the ONL Platform drivers necessary to manage the system.&lt;/p&gt;

&lt;p&gt;* Systems no longer in the lab cannot be certified post removal&lt;/p&gt;

&lt;p&gt;** Developing ONL Platform Drivers&lt;/p&gt;

&lt;p&gt;*** Vendor provided&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Open Network Linux - Documentation - Porting Guide</title>
      <link>http://ocp.opennetlinux.org/documentation/PortingGuide/</link>
      <pubDate>Fri, 09 Sep 2016 00:11:02 +0100</pubDate>
      
      <guid>http://ocp.opennetlinux.org/documentation/PortingGuide/</guid>
      <description>

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Open Network Linux has a number of internal APIs to simplify porting to
new hardware.&lt;/p&gt;

&lt;p&gt;To support a new switch/device, there are three large software components
that need device-specific drivers (information only known by the manufacturer
of the switch/device):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The ONL/ONIE installer &amp;ndash; how to install and boot ONL using ONIE&lt;/li&gt;
&lt;li&gt;The ONLP platform drivers &amp;ndash; how to manage hardware once ONL is running&lt;/li&gt;
&lt;li&gt;Any packet forwarding device specific settings
(e.g., front panel port mappings, pre-emphesis settings)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ONL provides plugable driver modules for (1) and (2) but currently
provides no support for (3) &amp;ndash; this is work in progress.&lt;/p&gt;

&lt;p&gt;The rest this PortingGuide is divided into two parts: (1) creating
the ONIE installer driver and (2) creating the ONLP platform driver.&lt;/p&gt;

&lt;h1 id=&#34;onl-installer&#34;&gt;ONL Installer&lt;/h1&gt;

&lt;h2 id=&#34;about-onie&#34;&gt;About ONIE&lt;/h2&gt;

&lt;p&gt;ONIE (the Open Network Installation Environment - &lt;a href=&#34;http://onie.org&#34;&gt;http://onie.org&lt;/a&gt;)
is a small piece of software that ONL expects to exist on every
switch, pre-installed by the switch vendor.  ONIE provides the
installation and management utilities to install/uninstall/rescue
a Network Operating System (a &amp;ldquo;NOS&amp;rdquo;) like ONL.  While ONIE is a
stand alone operating system in its own right, it is intentionally
stripped down and has few features outside of the bare minimum
needed to bootstrap a system and invoke an NOS installer program.&lt;/p&gt;

&lt;h2 id=&#34;onl-installer-operation&#34;&gt;ONL Installer Operation&lt;/h2&gt;

&lt;p&gt;ONL has an ONIE-compatible installation script called the &amp;lsquo;ONL
Installer&amp;rsquo;.  That is, the ONL installer is a device-specific
self-extracting shell script that, when run from ONIE, partitions
available storage, installs the ONL switch image file (SWI) on to
disk, and sets up the underlying boot loader (e.g., uboot or grub)
with the appropriate settings so that on boot, by default, ONL loads
correctly on the device.  So, to port ONL to a new switch, a number
of installer drivers, including for disk partitioning, installation,
booting, and python integration need to be written.&lt;/p&gt;

&lt;h2 id=&#34;onl-installer-example-code&#34;&gt;ONL Installer Example Code&lt;/h2&gt;

&lt;p&gt;TL; DR :: If you want to just jump to the code, look at the drivers
in $ONL/packages/platforms/$vendor/$platform/platform-config/r(0|1)/* &amp;ndash; in particular, the
powerpc-as5710-54x-r0b driver is a good example.  Copy the directory/file layout and naming conventions and
see how the driver code is called from $ONL/builds/powerpc/installer/legacy/builds/ppc-installer.sh&lt;/p&gt;

&lt;h2 id=&#34;onl-installer-file-layout&#34;&gt;ONL Installer file layout&lt;/h2&gt;

&lt;p&gt;All the installer drivers are stored in $ONL/packages/platforms/$vendor/$platform/platform-config,
where $platform corresponds to the ONIE platform identifier string and $vendor is the name of the platform
vendor e.g. accton, quanta, wnc.  This string is used to identify which set of drivers to load (ONL supports
many systems) at boot time and is critical that it matches the ONIE identifier exactly.  The rest of the
directory structure for the installer driver is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./$platform/$release/
./$platform/$release/Makefile                    # copy from existing driver
./$platform/$release/src/lib/boot/detect.sh          # Script that returns 0 if run on $platform, 1 otherwise
./$platform/$release/src/lib/boot/$platform          # Script run on boot that populates device/hardware
                                        #       specific ONL OS abstractions (see below)
./$platform/$release/src/lib/install/$platform.sh    # Script called from installer.sh to partition
                                        # and install ONL and setup boot params (see below)
./$platform/src/python/$platform/__init__.py         # Platform specific python library (see below)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;onl-installer-src-boot-drivers&#34;&gt;ONL Installer src/boot drivers&lt;/h2&gt;

&lt;p&gt;The $platform/src/lib/boot/$platform script is in charge of writing
the ONL boottime hardware abstraction configuration.  Because each
device has a different storage driver, storage device, management
network device, etc., ONL uses a series of config files to map the
specific hardware (an ethernet driver) to a device-agnostic form
(e.g., primary management interface).&lt;/p&gt;

&lt;p&gt;The following files need to be populated by the $platform boot script:
* /etc/onl/net : The PCI device name and interface name of the management ethernet
* /etc/onl/mounts : The devices that correspond to /mnt/flash and /mnt/flash2 at boot
* /etc/fw_env.config : The device and configuration of the firmware device, for fw_printenv, fw_setenv&lt;/p&gt;

&lt;h2 id=&#34;onl-installer-src-install-drivers&#34;&gt;ONL Installer src/install drivers&lt;/h2&gt;

&lt;p&gt;The $platform/src/lib/install/$platform.sh driver is called from the main installer script and has the job
of:
1) Identifying and partitioning the device specific storage
2) Deciding the file format of the target boot partition to install the ONL loader image
3) Deciding how to update the bootloader, e.g., in the case of uboot, what the $nos_bootcmd variables
    should be.&lt;/p&gt;

&lt;p&gt;The contents of this driver are sourced into the installer.sh and
so the variables and functions are called in various places.  There
are an excess of ways that switches can be built (what storage
types, etc.) and how they boot, so seading the installer.sh code
along with the example platform driver code seems to be the best
bet here &amp;ndash; FIXME!&lt;/p&gt;

&lt;p&gt;For example, looking at the driver
&lt;code&gt;$ONL/packages/platforms/accton/powerpc-accton-as5710-54x/platform-config/r0b/src/lib/install/powerpc-as5710-54x-r0b.sh&lt;/code&gt;
the driver first sets &amp;ldquo;platform_loader_raw=1&amp;rdquo; which tells the
installer that the boot partition has no file format (as opposed
to ext2fs or fat - it is type &amp;lsquo;raw&amp;rsquo;).  Then it has the platform_bootcmd as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;platform_bootcmd=&#39;usb start; usbboot 0x10000000 0:1; setenv bootargs console=$consoledev,$baudrate onl_platform=powerpc-as5710-54x-r0b; bootm 0x10000000&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which is a string of uboot commands, that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;usb start &amp;ndash; initialize the usb subsystems&lt;/li&gt;
&lt;li&gt;Using the usb boot loader, load the contents of device 0, partition 1 (0:1) into memory range 0x10000000&lt;/li&gt;
&lt;li&gt;Pass a number of env variables to the kernel at boot via $bootargs&lt;/li&gt;
&lt;li&gt;Actually just jump to memory 0x10000000 and start running (bootm 0x100000000)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The sequence of exact boot commands will vary with version of uboot
(or other boot loader), available storage, and other device specific
properties.&lt;/p&gt;

&lt;h2 id=&#34;onl-installer-src-python-drivers&#34;&gt;ONL Installer src/python drivers&lt;/h2&gt;

&lt;h1 id=&#34;open-network-linux-platform-onlp-apis&#34;&gt;Open Network Linux Platform (&amp;ldquo;ONLP&amp;rdquo;) APIs&lt;/h1&gt;

&lt;p&gt;Every new networking switch/router/box has a unique layout of which
devices (fans, power supplies, LEDs, SFP/SFP+/QSFP, temperature
sensors, etc.) connect to which I/O devices (I2C, GPIO, etc.) and
how they are managed (FPGA, CPLD).  Rather than mandate one hardware
approach or assume that there exists a BIOS to take care of this
work for us (some platforms have a BIOS, some do not; some drivers
are not supported by BIOS), ONL has created an abstraction layer
to inventory, manage, and monitor these devices.&lt;/p&gt;

&lt;h2 id=&#34;onlp-application-apis&#34;&gt;ONLP Application APIs&lt;/h2&gt;

&lt;p&gt;If you want to create an application in ONL that builds on top of the
platform, the &amp;ldquo;application to platform&amp;rdquo; APIs are found in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ONL/packages/base/any/onlp/src/onlp/module/inc/onlp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This section will have to become better documented, but look at the example
code in the &lt;code&gt;onlpdump&lt;/code&gt; driver for how to call the ONLP APIs as an application.&lt;/p&gt;

&lt;p&gt;At a high-level, each hardware device is given a unique Object ID
(OID).  Each type of device has a number of different properties that
is querable/programmable (e.g., read/set fan speed, query an SFP+ port
status, etc.)  and a mechanism for negotiating hardware capabilities
(e.g., is the fan speed setable?  reversible? does this SFP have a
hardware interupt bit on link down?).&lt;/p&gt;

&lt;p&gt;The ONLP API is has internal locking so it supports multiple concurrent
callers.  That said, there is no inter-application internal hardware
contention resolution, so, if for example one application wants the fans
at 25% and another wants them at 75%, the last caller wins.&lt;/p&gt;

&lt;p&gt;Applications start by getting a tree of OIDs from the platform using the
 onlp_sys_init(void) and onlp_sys_info_get() calls.  There exist a number
of macros for interogating OID types in oid.h, ala ONLP_OID&lt;em&gt;IS&lt;/em&gt;*().&lt;/p&gt;

&lt;h2 id=&#34;onlpi-driver-apis&#34;&gt;ONLPI Driver APIs&lt;/h2&gt;

&lt;p&gt;If you want to create a driver so that your new hardware can work with
ONL, the &amp;ldquo;platform to hardware&amp;rdquo; APIs are found in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ONL/packages/base/any/onlp/src/onlp/module/inc/onlp/platformi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This section will have to become better documented,
but look at the example driver &amp;lsquo;onlpie&amp;rsquo; implementation at
$ONL/packages/base/any/onlp/src/onlpie/module/src/.  Many driver
implementations have been written and they will become available over
time.&lt;/p&gt;

&lt;p&gt;At a high-level, the driver is responsible for providing implementations
of the various &amp;lsquo;platformi&amp;rsquo; APIs, e.g., sysi.h, fani.h, etc.  Whether
these implementations are provided via user-space or kernel space is an
implementation detail left to the driver maintainer.&lt;/p&gt;

&lt;p&gt;In terms of programming paradigm, the application calls into the platform
code (see above) and then the platform code calls into the driver.  The main
platform code handles locking to ensure that the underlying driver code does
not need to be re-entrant or handle concurrent API calls.  This dramatically
simplifies the ONLPI driver code and we have found in most cases that code
from existing projects (e.g., from an ODM diagnostic utilities) can be readily
cut and pasted into place.&lt;/p&gt;

&lt;p&gt;Feedback on these APIs are welcome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Open Network Linux - Documentation</title>
      <link>http://ocp.opennetlinux.org/documentation/</link>
      <pubDate>Tue, 19 Jul 2016 00:11:02 +0100</pubDate>
      
      <guid>http://ocp.opennetlinux.org/documentation/</guid>
      <description>

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ocp.opennetlinux.org/documentation/SupportedHardware/&#34;&gt;Supported Hardware&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ocp.opennetlinux.org/documentation/GettingStarted/&#34;&gt;Deployment Guide&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;development&#34;&gt;Development&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ocp.opennetlinux.org/documentation/PortingGuide/&#34;&gt;Porting Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ocp.opennetlinux.org/documentation/Building/&#34;&gt;Build Guide&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-onl-works&#34;&gt;How ONL Works&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ocp.opennetlinux.org/documentation/BootProcess/&#34;&gt;Boot Process&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>